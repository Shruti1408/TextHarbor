import re
import pandas as pd
import nltk
import tweepy

from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from textblob import TextBlob
import matplotlib.pyplot as plt

nltk.download('punkt')
nltk.download('stopwords')
tweets_df = pd.read_csv("tweets.csv")

for tweet_text in tweets_df['content'].head(5):
    cleaned_tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", str(tweet_text)).split())
    analysis = TextBlob(cleaned_tweet)
    print(cleaned_tweet, ":", analysis.sentiment)

positive_count = 0
negative_count = 0
neutral_count = 0

# Process tweets and classify sentiments
for tweet_text in tweets_df['content']:
    cleaned_tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", str(tweet_text)).split())
    analysis = TextBlob(cleaned_tweet)
    if analysis.sentiment.polarity > 0:
        positive_count += 1
    elif analysis.sentiment.polarity < 0:
        negative_count += 1
    else:
        neutral_count += 1

# Print sentiment distribution
print("Positive tweets:", positive_count)
print("Negative tweets:", negative_count)
print("Neutral tweets:", neutral_count)

# Process tweets and classify sentiments
sentiments = []
for tweet_text in tweets_df['content']:
    cleaned_tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", str(tweet_text)).split())
    analysis = TextBlob(cleaned_tweet)
    if analysis.sentiment.polarity > 0:
        sentiment = 'Positive'
    elif analysis.sentiment.polarity < 0:
        sentiment = 'Negative'
    else:
        sentiment = 'Neutral'
    sentiments.append(sentiment)

# Add sentiment column to the DataFrame
tweets_df['Sentiment'] = sentiments

# Display the DataFrame with sentiment analysis results
display(tweets_df)

labels = ['Positive', 'Negative', 'Neutral']
sizes = [positive_count, negative_count, neutral_count]
colors = ['brown', 'grey', 'lightskyblue']
explode = (0.1, 0, 0)  # explode 1st slice
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Sentiment Distribution of Sampled Tweets')
plt.show()

positive_tweets = tweets_df[tweets_df['Sentiment'] == 'Positive']
negative_tweets = tweets_df[tweets_df['Sentiment'] == 'Negative']
neutral_tweets = tweets_df[tweets_df['Sentiment'] == 'Neutral']

plt.bar(['Positive', 'Negative', 'Neutral'], [len(positive_tweets), len(negative_tweets), len(neutral_tweets)])
plt.title('Sentiment Distribution of Tweets')
plt.xlabel('Sentiment Category')
plt.ylabel('Number of Tweets')
plt.show()
